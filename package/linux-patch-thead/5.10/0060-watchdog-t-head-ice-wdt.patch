From 3bfa77b9148f873d42f70fb2ac771d3e62c224b7 Mon Sep 17 00:00:00 2001
From: Xianting Tian <tianxianting.txt@alibaba-inc.com>
Date: Mon, 8 Feb 2021 11:27:24 +0800
Subject: [PATCH 60/65] watchdog: t-head: ice wdt

---
 arch/riscv/boot/dts/thead/ice.dts |   6 +
 drivers/watchdog/Kconfig          |  14 +++
 drivers/watchdog/Makefile         |   1 +
 drivers/watchdog/ice_wdt.c        | 193 ++++++++++++++++++++++++++++++
 4 files changed, 214 insertions(+)
 create mode 100644 drivers/watchdog/ice_wdt.c

diff --git a/arch/riscv/boot/dts/thead/ice.dts b/arch/riscv/boot/dts/thead/ice.dts
index 399edc0a5027..eb94b02e626f 100644
--- a/arch/riscv/boot/dts/thead/ice.dts
+++ b/arch/riscv/boot/dts/thead/ice.dts
@@ -536,6 +536,12 @@
 			contiguous-size = <0x0 0x20000000>;
 		};
 
+		watchdog: watchdog@3fffe3000 {
+			compatible = "ice,ice-wdt";
+			reg = <0x3 0xfffe3000 0x0 0x1000>;
+			interrupts = <20>;
+		};
+
 		dpu: dpu@3fff28000 {
 			compatible = "verisilicon,dc8000-fb";
 			reg = <0x3 0xfff28000 0x0 0x8000>;
diff --git a/drivers/watchdog/Kconfig b/drivers/watchdog/Kconfig
index db935d6b10c2..8bf6020d2981 100644
--- a/drivers/watchdog/Kconfig
+++ b/drivers/watchdog/Kconfig
@@ -724,6 +724,20 @@ config IMX2_WDT
 	  To compile this driver as a module, choose M here: the
 	  module will be called imx2_wdt.
 
+config ICE_WDT
+	tristate "ICE+ Watchdog"
+	depends on RISCV
+	default y
+	select WATCHDOG_CORE
+	help
+	  This is the driver for the hardware watchdog
+	  on the ice and later processors.
+	  If you have one of these processors and wish to have
+	  watchdog support enabled, say Y, otherwise say N.
+
+	  To compile this driver as a module, choose M here: the
+	  module will be called ice_wdt.
+
 config IMX_SC_WDT
 	tristate "IMX SC Watchdog"
 	depends on HAVE_ARM_SMCCC
diff --git a/drivers/watchdog/Makefile b/drivers/watchdog/Makefile
index 071a2e50be98..929a06e21120 100644
--- a/drivers/watchdog/Makefile
+++ b/drivers/watchdog/Makefile
@@ -67,6 +67,7 @@ obj-$(CONFIG_STMP3XXX_RTC_WATCHDOG) += stmp3xxx_rtc_wdt.o
 obj-$(CONFIG_TS4800_WATCHDOG) += ts4800_wdt.o
 obj-$(CONFIG_TS72XX_WATCHDOG) += ts72xx_wdt.o
 obj-$(CONFIG_IMX2_WDT) += imx2_wdt.o
+obj-$(CONFIG_ICE_WDT) += ice_wdt.o
 obj-$(CONFIG_IMX_SC_WDT) += imx_sc_wdt.o
 obj-$(CONFIG_IMX7ULP_WDT) += imx7ulp_wdt.o
 obj-$(CONFIG_UX500_WATCHDOG) += ux500_wdt.o
diff --git a/drivers/watchdog/ice_wdt.c b/drivers/watchdog/ice_wdt.c
new file mode 100644
index 000000000000..6ebbe495e831
--- /dev/null
+++ b/drivers/watchdog/ice_wdt.c
@@ -0,0 +1,193 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
+
+#include <linux/clk.h>
+#include <linux/delay.h>
+#include <linux/err.h>
+#include <linux/init.h>
+#include <linux/io.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/moduleparam.h>
+#include <linux/of_device.h>
+#include <linux/platform_device.h>
+#include <linux/types.h>
+#include <linux/watchdog.h>
+
+#define DRV_NAME		"ice-wdt"
+
+#define WDT_LOCK		0x0
+#define WDT_OT_LOAD_H		0x4
+#define WDT_OT_LOAD_L		0x8
+#define WDT_RMOD		0xC
+#define WDT_EN			0x10
+#define WDT_KNOCK		0x14
+#define WDT_EOI 		0x18
+#define WDT_CUR_VALUE_H 	0x1C
+#define WDT_CUR_VALUE_L 	0x20
+#define WDT_INT_STATE		0x24
+
+#define REGS_WRITE_UNLOCK 	0x5ada7200
+#define REGS_WRITE_LOCK 	0x5ada7201
+
+#define TOUCH_WATCHDOG		0x55aadd22
+
+#define ICE_WDT_TIMEOUT 	120
+
+#define DEFAULT_TIMEOUT 	0xcccccccc
+
+static unsigned int timeout;
+
+struct ice_wdt_dev {
+	struct watchdog_device wdt_dev;
+	void __iomem *wdt_base;
+};
+
+static const struct watchdog_info ice_wdt_info = {
+	.identity       = DRV_NAME,
+	.options        = WDIOF_SETTIMEOUT | WDIOF_KEEPALIVEPING | WDIOF_MAGICCLOSE,
+};
+
+static void ice_wdt_change_timeout(struct watchdog_device *wdt_dev,
+		unsigned int timeout)
+{
+	struct ice_wdt_dev *ice_wdt = watchdog_get_drvdata(wdt_dev);
+	u32 timetick;
+
+	timetick = (DEFAULT_TIMEOUT/120) * timeout;
+
+	writel(REGS_WRITE_UNLOCK, ice_wdt->wdt_base + WDT_LOCK);
+	writel(timetick, ice_wdt->wdt_base + WDT_OT_LOAD_L);
+	writel(REGS_WRITE_LOCK, ice_wdt->wdt_base + WDT_LOCK);
+}
+
+
+static int ice_wdt_restart(struct watchdog_device *wdt_dev,
+			     unsigned long action, void *data)
+{
+	struct ice_wdt_dev *ice_wdt = watchdog_get_drvdata(wdt_dev);
+
+	writel(REGS_WRITE_UNLOCK, ice_wdt->wdt_base + WDT_LOCK);
+	writel(0, ice_wdt->wdt_base + WDT_EN);
+	writel(0, ice_wdt->wdt_base + WDT_RMOD);
+	writel(0, ice_wdt->wdt_base + WDT_OT_LOAD_H);
+	writel(0xff, ice_wdt->wdt_base + WDT_OT_LOAD_L);
+	writel(1, ice_wdt->wdt_base + WDT_EN);
+	writel(REGS_WRITE_LOCK, ice_wdt->wdt_base + WDT_LOCK);
+
+	while (1);
+
+	return 0;
+}
+
+static int ice_wdt_ping(struct watchdog_device *wdt_dev)
+{
+	struct ice_wdt_dev *ice_wdt = watchdog_get_drvdata(wdt_dev);
+
+	writel(REGS_WRITE_UNLOCK, ice_wdt->wdt_base + WDT_LOCK);
+	writel(TOUCH_WATCHDOG, ice_wdt->wdt_base + WDT_KNOCK);
+	writel(REGS_WRITE_LOCK, ice_wdt->wdt_base + WDT_LOCK);
+
+	return 0;
+}
+
+static int ice_wdt_set_timeout(struct watchdog_device *wdt_dev,
+				 unsigned int timeout)
+{
+	wdt_dev->timeout = timeout;
+
+	ice_wdt_change_timeout(wdt_dev, timeout);
+	ice_wdt_ping(wdt_dev);
+
+	return 0;
+}
+
+static int ice_wdt_stop(struct watchdog_device *wdt_dev)
+{
+	struct ice_wdt_dev *ice_wdt = watchdog_get_drvdata(wdt_dev);
+
+	writel(REGS_WRITE_UNLOCK, ice_wdt->wdt_base + WDT_LOCK);
+	writel(0, ice_wdt->wdt_base + WDT_EN);
+	writel(REGS_WRITE_LOCK, ice_wdt->wdt_base + WDT_LOCK);
+
+	return 0;
+}
+
+static int ice_wdt_start(struct watchdog_device *wdt_dev)
+{
+	struct ice_wdt_dev *ice_wdt = watchdog_get_drvdata(wdt_dev);
+
+	writel(REGS_WRITE_UNLOCK, ice_wdt->wdt_base + WDT_LOCK);
+	writel(1, ice_wdt->wdt_base + WDT_RMOD);
+	writel(1, ice_wdt->wdt_base + WDT_EN);
+	writel(REGS_WRITE_LOCK, ice_wdt->wdt_base + WDT_LOCK);
+
+	return 0;
+}
+
+static const struct watchdog_ops ice_wdt_ops = {
+	.owner		= THIS_MODULE,
+	.start		= ice_wdt_start,
+	.stop		= ice_wdt_stop,
+	.ping		= ice_wdt_ping,
+	.set_timeout	= ice_wdt_set_timeout,
+	.restart        = ice_wdt_restart,
+};
+
+static const struct of_device_id ice_wdt_dt_ids[] = {
+	{ .compatible = "ice,ice-wdt",},
+	{ }
+};
+
+static int ice_wdt_probe(struct platform_device *pdev)
+{
+	struct device *dev = &pdev->dev;
+	struct ice_wdt_dev *ice_wdt;
+	int err;
+
+	ice_wdt = devm_kzalloc(dev, sizeof(*ice_wdt), GFP_KERNEL);
+	if (!ice_wdt) {
+		return -ENOMEM;
+	}
+
+	ice_wdt->wdt_base = devm_platform_ioremap_resource(pdev, 0);
+	if (IS_ERR(ice_wdt->wdt_base)) {
+		return PTR_ERR(ice_wdt->wdt_base);
+	}
+
+	ice_wdt->wdt_dev.parent = dev;
+	ice_wdt->wdt_dev.info = &ice_wdt_info;
+	ice_wdt->wdt_dev.ops = &ice_wdt_ops;
+	ice_wdt->wdt_dev.timeout = ICE_WDT_TIMEOUT;
+	ice_wdt->wdt_dev.min_timeout = 2;
+
+	watchdog_set_drvdata(&ice_wdt->wdt_dev, ice_wdt);
+
+	watchdog_init_timeout(&ice_wdt->wdt_dev, timeout, dev);
+	watchdog_set_restart_priority(&ice_wdt->wdt_dev, 128);
+
+	ice_wdt_stop(&ice_wdt->wdt_dev);
+
+	err = devm_watchdog_register_device(dev, &ice_wdt->wdt_dev);
+	if (err)
+		return err;
+
+	dev_info(dev, "Watchdog enabled (timeout=%d sec)\n", ice_wdt->wdt_dev.timeout);
+
+	return 0;
+}
+
+static struct platform_driver ice_wdt_driver = {
+	.probe		= ice_wdt_probe,
+	.driver		= {
+		.name		= DRV_NAME,
+		.of_match_table	= ice_wdt_dt_ids,
+	},
+};
+
+module_platform_driver(ice_wdt_driver);
+
+module_param(timeout, uint, 0);
+MODULE_PARM_DESC(timeout, "Watchdog heartbeat in seconds");
+
+MODULE_LICENSE("GPL");
+MODULE_DESCRIPTION("Ice Watchdog Timer Driver");
-- 
2.17.1

