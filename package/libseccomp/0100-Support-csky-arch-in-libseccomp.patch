From 08d870e48d201051b74e53fcb5ce17b4f96135b3 Mon Sep 17 00:00:00 2001
From: Ma Jun <majun258@linux.alibaba.com>
Date: Tue, 10 Mar 2020 22:06:55 +0800
Subject: [PATCH] Support csky arch in libseccomp

Signed-off-by: Ma Jun <majun258@linux.alibaba.com>
---
 include/seccomp.h.in              |  15 ++
 src/Makefile.am                   |   1 +
 src/arch-csky-syscalls.c          | 528 ++++++++++++++++++++++++++++++++++++++
 src/arch-csky.c                   |  38 +++
 src/arch-csky.h                   |  37 +++
 src/arch-syscall-check.c          |  10 +
 src/arch-syscall-validate         |  44 ++++
 src/arch.c                        |   7 +
 src/gen_pfc.c                     |   2 +
 src/python/seccomp.pyx            |   2 +
 src/system.c                      |   1 +
 tests/16-sim-arch_basic.c         |   3 +
 tests/16-sim-arch_basic.py        |   1 +
 tests/23-sim-arch_all_le_basic.c  |   4 +
 tests/23-sim-arch_all_le_basic.py |   1 +
 tests/regression                  |   3 +-
 tools/scmp_arch_detect.c          |   2 +
 tools/scmp_bpf_disasm.c           |   2 +
 tools/scmp_bpf_sim.c              |   2 +
 tools/util.c                      |   2 +
 tools/util.h                      |   8 +
 21 files changed, 712 insertions(+), 1 deletion(-)
 create mode 100644 src/arch-csky-syscalls.c
 create mode 100644 src/arch-csky.c
 create mode 100644 src/arch-csky.h

diff --git a/include/seccomp.h.in b/include/seccomp.h.in
index cd1658e..3731e6b 100644
--- a/include/seccomp.h.in
+++ b/include/seccomp.h.in
@@ -181,6 +181,21 @@ struct scmp_arg_cmp {
 #define SCMP_ARCH_PPC64LE	AUDIT_ARCH_PPC64LE
 
 /**
+ * The CSKY architecture tokens
+ */
+#ifndef EM_CSKY
+#define EM_CSKY		244
+#endif /* EM_CSKY */
+
+#ifndef AUDIT_ARCH_CSKY
+#define AUDIT_ARCH_CSKY	(EM_CSKY|__AUDIT_ARCH_32BIT|__AUDIT_ARCH_LE)
+#endif /* AUDIT_ARCH_RISCV64 */
+
+#define SCMP_ARCH_CSKY	AUDIT_ARCH_CSKY
+
+
+
+/**
  * The S390 architecture tokens
  */
 #define SCMP_ARCH_S390		AUDIT_ARCH_S390
diff --git a/src/Makefile.am b/src/Makefile.am
index 47e2f33..6e5a561 100644
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -36,6 +36,7 @@ SOURCES_ALL = \
 	arch-x32.h arch-x32.c arch-x32-syscalls.c \
 	arch-arm.h arch-arm.c arch-arm-syscalls.c \
 	arch-aarch64.h arch-aarch64.c arch-aarch64-syscalls.c \
+	arch-csky.h arch-csky.c arch-csky-syscalls.c \
 	arch-mips.h arch-mips.c arch-mips-syscalls.c \
 	arch-mips64.h arch-mips64.c arch-mips64-syscalls.c \
 	arch-mips64n32.h arch-mips64n32.c arch-mips64n32-syscalls.c \
diff --git a/src/arch-csky-syscalls.c b/src/arch-csky-syscalls.c
new file mode 100644
index 0000000..f95d996
--- /dev/null
+++ b/src/arch-csky-syscalls.c
@@ -0,0 +1,528 @@
+/**
+ * Enhanced Seccomp CSKY 32-bit (csky) Syscall Table
+ *
+ * Copyright (c) 2018 David Abdurachmanov <david.abdurachmanov@gmail.com>
+ * Author: David Abdurachmanov <david.abdurachmanov@gmail.com>
+ */
+
+/*
+ * This library is free software; you can redistribute it and/or modify it
+ * under the terms of version 2.1 of the GNU Lesser General Public License as
+ * published by the Free Software Foundation.
+ *
+ * This library is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
+ * for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this library; if not, see <http://www.gnu.org/licenses>.
+ */
+
+#include <string.h>
+
+#include <seccomp.h>
+
+#include "arch.h"
+#include "arch-csky.h"
+
+/* NOTE: based on Linux 4.19-rc8 */
+const struct arch_syscall_def csky_syscall_table[] = { \
+	{ "_llseek", __PNR__llseek },
+	{ "_newselect", __PNR__newselect },
+	{ "_sysctl", __PNR__sysctl },
+	{ "accept", 202 },
+	{ "accept4", 242 },
+	{ "access", __PNR_access },
+	{ "acct", 89 },
+	{ "add_key", 217 },
+	{ "adjtimex", 171 },
+	{ "afs_syscall", __PNR_afs_syscall },
+	{ "alarm", __PNR_alarm },
+	{ "arm_fadvise64_64", __PNR_arm_fadvise64_64 },
+	{ "arm_sync_file_range", __PNR_arm_sync_file_range },
+	{ "arch_prctl", __PNR_arch_prctl },
+	{ "bdflush", __PNR_bdflush },
+	{ "bind", 200 },
+	{ "bpf", 280 },
+	{ "break", __PNR_break },
+	{ "breakpoint", __PNR_breakpoint },
+	{ "brk", 214 },
+	{ "cachectl", __PNR_cachectl },
+	{ "cacheflush", __PNR_cacheflush },
+	{ "capget", 90 },
+	{ "capset", 91 },
+	{ "chdir", 49 },
+	{ "chmod", __PNR_chmod },
+	{ "chown", __PNR_chown },
+	{ "chown32", __PNR_chown32 },
+	{ "chroot", 51 },
+	{ "clock_adjtime", 266 },
+	{ "clock_getres", 114 },
+	{ "clock_gettime", 113 },
+	{ "clock_nanosleep", 115 },
+	{ "clock_settime", 112 },
+	{ "clone", 220 },
+	{ "close", 57 },
+	{ "connect", 203 },
+	{ "copy_file_range", 285 },
+	{ "creat", __PNR_creat },
+	{ "create_module", __PNR_create_module },
+	{ "delete_module", 106 },
+	{ "dup", 23 },
+	{ "dup2", __PNR_dup2 },
+	{ "dup3", 24 },
+	{ "epoll_create", __PNR_epoll_create },
+	{ "epoll_create1", 20 },
+	{ "epoll_ctl", 21 },
+	{ "epoll_ctl_old", __PNR_epoll_ctl_old },
+	{ "epoll_pwait", 22 },
+	{ "epoll_wait", __PNR_epoll_wait },
+	{ "epoll_wait_old", __PNR_epoll_wait_old },
+	{ "eventfd", __PNR_eventfd },
+	{ "eventfd2", 19 },
+	{ "execve", 221 },
+	{ "execveat", 281 },
+	{ "exit", 93 },
+	{ "exit_group", 94 },
+	{ "faccessat", 48 },
+	{ "fadvise64", 223 },
+	{ "fadvise64_64", __PNR_fadvise64_64 },
+	{ "fallocate", 47 },
+	{ "fanotify_init", 262 },
+	{ "fanotify_mark", 263 },
+	{ "fchdir", 50 },
+	{ "fchmod", 52 },
+	{ "fchmodat", 53 },
+	{ "fchown", 55 },
+	{ "fchown32", __PNR_fchown32 },
+	{ "fchownat", 54 },
+	{ "fcntl", 25 },
+	{ "fcntl64", __PNR_fcntl64 },
+	{ "fdatasync", 83 },
+	{ "fgetxattr", 10 },
+	{ "finit_module", 273 },
+	{ "flistxattr", 13 },
+	{ "flock", 32 },
+	{ "fork", __PNR_fork },
+	{ "fremovexattr", 16 },
+	{ "fsetxattr", 7 },
+	{ "fstat", 80 },
+	{ "fstat64", __PNR_fstat64 },
+	{ "fstatat64", __PNR_fstatat64 },
+	{ "fstatfs", 44 },
+	{ "fstatfs64", __PNR_fstatfs64 },
+	{ "fsync", 82 },
+	{ "ftime", __PNR_ftime },
+	{ "ftruncate", 46 },
+	{ "ftruncate64", __PNR_ftruncate64 },
+	{ "futex", 98 },
+	{ "futimesat", __PNR_futimesat },
+	{ "get_kernel_syms", __PNR_get_kernel_syms },
+	{ "get_mempolicy", 236 },
+	{ "get_robust_list", 100 },
+	{ "get_thread_area", __PNR_get_thread_area },
+	{ "get_tls", __PNR_get_tls },
+	{ "getcpu", 168 },
+	{ "getcwd", 17 },
+	{ "getdents", __PNR_getdents },
+	{ "getdents64", 61 },
+	{ "getegid", 177 },
+	{ "getegid32", __PNR_getegid32 },
+	{ "geteuid", 175 },
+	{ "geteuid32", __PNR_geteuid32 },
+	{ "getgid", 176 },
+	{ "getgid32", __PNR_getgid32 },
+	{ "getgroups", 158 },
+	{ "getgroups32", __PNR_getgroups32 },
+	{ "getitimer", 102 },
+	{ "getpeername", 205 },
+	{ "getpgid", 155 },
+	{ "getpgrp", __PNR_getpgrp },
+	{ "getpid", 172 },
+	{ "getpmsg", __PNR_getpmsg },
+	{ "getppid", 173 },
+	{ "getpriority", 141 },
+	{ "getrandom", 278 },
+	{ "getresgid", 150 },
+	{ "getresgid32", __PNR_getresgid32 },
+	{ "getresuid", 148 },
+	{ "getresuid32", __PNR_getresuid32 },
+	{ "getrlimit", 163 },
+	{ "getrusage", 165 },
+	{ "getsid", 156 },
+	{ "getsockname", 204 },
+	{ "getsockopt", 209 },
+	{ "gettid", 178 },
+	{ "gettimeofday", 169 },
+	{ "getuid", 174 },
+	{ "getuid32", __PNR_getuid32 },
+	{ "getxattr", 8 },
+	{ "gtty", __PNR_gtty },
+	{ "idle", __PNR_idle },
+	{ "init_module", 105 },
+	{ "inotify_add_watch", 27 },
+	{ "inotify_init", __PNR_inotify_init },
+	{ "inotify_init1", 26 },
+	{ "inotify_rm_watch", 28 },
+	{ "io_cancel", 3 },
+	{ "io_destroy", 1 },
+	{ "io_getevents", 4 },
+	{ "io_pgetevents", 292},
+	{ "io_setup", 0 },
+	{ "io_submit", 2 },
+	{ "ioctl", 29 },
+	{ "ioperm", __PNR_ioperm },
+	{ "iopl", __PNR_iopl },
+	{ "ioprio_get", 31 },
+	{ "ioprio_set", 30 },
+	{ "ipc", __PNR_ipc },
+	{ "kcmp", 272 },
+	{ "kexec_file_load", __PNR_kexec_file_load },
+	{ "kexec_load", 104 },
+	{ "keyctl", 219 },
+	{ "kill", 129 },
+	{ "lchown", __PNR_lchown },
+	{ "lchown32", __PNR_lchown32 },
+	{ "lgetxattr", 9 },
+	{ "link", __PNR_link },
+	{ "linkat", 37 },
+	{ "listen", 201 },
+	{ "listxattr", 11 },
+	{ "llistxattr", 12 },
+	{ "lock", __PNR_lock },
+	{ "lookup_dcookie", 18 },
+	{ "lremovexattr", 15 },
+	{ "lseek", 62 },
+	{ "lsetxattr", 6 },
+	{ "lstat", __PNR_lstat },
+	{ "lstat64", __PNR_lstat64 },
+	{ "madvise", 233 },
+	{ "mbind", 235 },
+	{ "membarrier", 283 },
+	{ "memfd_create", 279 },
+	{ "migrate_pages", 238 },
+	{ "mincore", 232 },
+	{ "mkdir", __PNR_mkdir },
+	{ "mkdirat", 34 },
+	{ "mknod", __PNR_mknod },
+	{ "mknodat", 33 },
+	{ "mlock", 228 },
+	{ "mlock2", 284 },
+	{ "mlockall", 230 },
+	{ "mmap", 222 },
+	{ "mmap2", __PNR_mmap2 },
+	{ "modify_ldt", __PNR_modify_ldt },
+	{ "mount", 40 },
+	{ "move_pages", 239 },
+	{ "mprotect", 226 },
+	{ "mpx", __PNR_mpx },
+	{ "mq_getsetattr", 185 },
+	{ "mq_notify", 184 },
+	{ "mq_open", 180 },
+	{ "mq_timedreceive", 183 },
+	{ "mq_timedsend", 182 },
+	{ "mq_unlink", 181 },
+	{ "mremap", 216 },
+	{ "msgctl", 187 },
+	{ "msgget", 186 },
+	{ "msgrcv", 188 },
+	{ "msgsnd", 189 },
+	{ "msync", 227 },
+	{ "multiplexer", __PNR_multiplexer },
+	{ "munlock", 229 },
+	{ "munlockall", 231 },
+	{ "munmap", 215 },
+	{ "name_to_handle_at", 264 },
+	{ "nanosleep", 101 },
+	{ "newfstatat", 79 },
+	{ "nfsservctl", 42 },
+	{ "nice", __PNR_nice },
+	{ "oldfstat", __PNR_oldfstat },
+	{ "oldlstat", __PNR_oldlstat },
+	{ "oldolduname", __PNR_oldolduname },
+	{ "oldstat", __PNR_oldstat },
+	{ "olduname", __PNR_olduname },
+	{ "oldwait4", __PNR_oldwait4 },
+	{ "open", __PNR_open },
+	{ "open_by_handle_at", 265 },
+	{ "openat", 56 },
+	{ "pause", __PNR_pause },
+	{ "pciconfig_iobase", __PNR_pciconfig_iobase },
+	{ "pciconfig_read", __PNR_pciconfig_read },
+	{ "pciconfig_write", __PNR_pciconfig_write },
+	{ "perf_event_open", 241 },
+	{ "personality", 92 },
+	{ "pipe", __PNR_pipe },
+	{ "pipe2", 59 },
+	{ "pivot_root", 41 },
+	{ "pkey_alloc", 289 },
+	{ "pkey_free", 290 },
+	{ "pkey_mprotect", 288 },
+	{ "poll", __PNR_poll },
+	{ "ppoll", 73 },
+	{ "prctl", 167 },
+	{ "pread64", 67 },
+	{ "preadv", 69 },
+	{ "preadv2", __PNR_preadv2 },
+	{ "prlimit64", 261 },
+	{ "process_vm_readv", 270 },
+	{ "process_vm_writev", 271 },
+	{ "prof", __PNR_prof },
+	{ "profil", __PNR_profil },
+	{ "pselect6", 72 },
+	{ "ptrace", 117 },
+	{ "putpmsg", __PNR_putpmsg },
+	{ "pwrite64", 68 },
+	{ "pwritev", 70 },
+	{ "pwritev2", __PNR_pwritev2 },
+	{ "query_module", __PNR_query_module },
+	{ "quotactl", 60 },
+	{ "read", 63 },
+	{ "readahead", 213 },
+	{ "readdir", __PNR_readdir },
+	{ "readlink", __PNR_readlink },
+	{ "readlinkat", 78 },
+	{ "readv", 65 },
+	{ "reboot", 142 },
+	{ "recv", __PNR_recv },
+	{ "recvfrom", 207 },
+	{ "recvmmsg", 243 },
+	{ "riscv_flush_icache", __PNR_riscv_flush_icache },
+	{ "recvmsg", 212 },
+	{ "remap_file_pages", 234 },
+	{ "removexattr", 14 },
+	{ "rename", __PNR_rename },
+	{ "renameat", __PNR_renameat },
+	{ "renameat2", __PNR_renameat2 },
+	{ "request_key", 218 },
+	{ "restart_syscall", 128 },
+	{ "rmdir", __PNR_rmdir },
+	{ "rseq", 293 },
+	{ "rt_sigaction", 134 },
+	{ "rt_sigpending", 136 },
+	{ "rt_sigprocmask", 135 },
+	{ "rt_sigqueueinfo", 138 },
+	{ "rt_sigreturn", 139 },
+	{ "rt_sigsuspend", 133 },
+	{ "rt_sigtimedwait", 137 },
+	{ "rt_tgsigqueueinfo", 240 },
+	{ "rtas", __PNR_rtas },
+	{ "s390_guarded_storage", __PNR_s390_guarded_storage },
+	{ "s390_pci_mmio_read", __PNR_s390_pci_mmio_read },
+	{ "s390_pci_mmio_write", __PNR_s390_pci_mmio_write },
+	{ "s390_runtime_instr", __PNR_s390_runtime_instr },
+	{ "s390_sthyi", __PNR_s390_sthyi },
+	{ "sched_get_priority_max", 125 },
+	{ "sched_get_priority_min", 126 },
+	{ "sched_getaffinity", 123 },
+	{ "sched_getattr", 275 },
+	{ "sched_getparam", 121 },
+	{ "sched_getscheduler", 120 },
+	{ "sched_rr_get_interval", 127 },
+	{ "sched_setaffinity", 122 },
+	{ "sched_setattr", 274 },
+	{ "sched_setparam", 118 },
+	{ "sched_setscheduler", 119 },
+	{ "sched_yield", 124 },
+	{ "seccomp", 277 },
+	{ "security", __PNR_security },
+	{ "select", __PNR_select },
+	{ "semctl", 191 },
+	{ "semget", 190 },
+	{ "semop", 193 },
+	{ "semtimedop", 192 },
+	{ "send", __PNR_send },
+	{ "sendfile", 71 },
+	{ "sendfile64", __PNR_sendfile64 },
+	{ "sendmmsg", 269 },
+	{ "sendmsg", 211 },
+	{ "sendto", 206 },
+	{ "set_mempolicy", 237 },
+	{ "set_robust_list", 99 },
+	{ "set_thread_area", __PNR_set_thread_area },
+	{ "set_tid_address", 96 },
+	{ "set_tls", __PNR_set_tls },
+	{ "setdomainname", 162 },
+	{ "setfsgid", 152 },
+	{ "setfsgid32", __PNR_setfsgid32 },
+	{ "setfsuid", 151 },
+	{ "setfsuid32", __PNR_setfsuid32 },
+	{ "setgid", 144 },
+	{ "setgid32", __PNR_setgid32 },
+	{ "setgroups", 159 },
+	{ "setgroups32", __PNR_setgroups32 },
+	{ "sethostname", 161 },
+	{ "setitimer", 103 },
+	{ "setns", 268 },
+	{ "setpgid", 154 },
+	{ "setpriority", 140 },
+	{ "setregid", 143 },
+	{ "setregid32", __PNR_setregid32 },
+	{ "setresgid", 149 },
+	{ "setresgid32", __PNR_setresgid32 },
+	{ "setresuid", 147 },
+	{ "setresuid32", __PNR_setresuid32 },
+	{ "setreuid", 145 },
+	{ "setreuid32", __PNR_setreuid32 },
+	{ "setrlimit", 164 },
+	{ "setsid", 157 },
+	{ "setsockopt", 208 },
+	{ "settimeofday", 170 },
+	{ "setuid", 146 },
+	{ "setuid32", __PNR_setuid32 },
+	{ "setxattr", 5 },
+	{ "sgetmask", __PNR_sgetmask },
+	{ "shmat", 196 },
+	{ "shmctl", 195 },
+	{ "shmdt", 197 },
+	{ "shmget", 194 },
+	{ "shutdown", 210 },
+	{ "sigaction", __PNR_sigaction },
+	{ "sigaltstack", 132 },
+	{ "signal", __PNR_signal },
+	{ "signalfd", __PNR_signalfd },
+	{ "signalfd4", 74 },
+	{ "sigpending", __PNR_sigpending },
+	{ "sigprocmask", __PNR_sigprocmask },
+	{ "sigreturn", __PNR_sigreturn },
+	{ "sigsuspend", __PNR_sigsuspend },
+	{ "socket", 198 },
+	{ "socketcall", __PNR_socketcall },
+	{ "socketpair", 199 },
+	{ "splice", 76 },
+	{ "spu_create", __PNR_spu_create },
+	{ "spu_run", __PNR_spu_run },
+	{ "ssetmask", __PNR_ssetmask },
+	{ "stat", __PNR_stat },
+	{ "stat64", __PNR_stat64 },
+	{ "statfs", 43 },
+	{ "statfs64", __PNR_statfs64 },
+	{ "statx", 291 },
+	{ "stime", __PNR_stime },
+	{ "stty", __PNR_stty },
+	{ "subpage_prot", __PNR_subpage_prot },
+	{ "swapcontext", __PNR_swapcontext },
+	{ "swapoff", 225 },
+	{ "swapon", 224 },
+	{ "switch_endian", __PNR_switch_endian },
+	{ "symlink", __PNR_symlink },
+	{ "symlinkat", 36 },
+	{ "sync", 81 },
+	{ "sync_file_range", 84 },
+	{ "sync_file_range2", __PNR_sync_file_range2 },
+	{ "syncfs", 267 },
+	{ "syscall", __PNR_syscall },
+	{ "sys_debug_setcontext", __PNR_sys_debug_setcontext },
+	{ "sysfs", __PNR_sysfs },
+	{ "sysinfo", 179 },
+	{ "syslog", 116 },
+	{ "sysmips", __PNR_sysmips },
+	{ "tee", 77 },
+	{ "tgkill", 131 },
+	{ "time", __PNR_time },
+	{ "timer_create", 107 },
+	{ "timer_delete", 111 },
+	{ "timer_getoverrun", 109 },
+	{ "timer_gettime", 108 },
+	{ "timer_settime", 110 },
+	{ "timerfd", __PNR_timerfd },
+	{ "timerfd_create", 85 },
+	{ "timerfd_gettime", 87 },
+	{ "timerfd_settime", 86 },
+	{ "times", 153 },
+	{ "tkill", 130 },
+	{ "truncate", 45 },
+	{ "truncate64", __PNR_truncate64 },
+	{ "tuxcall", __PNR_tuxcall },
+	{ "ugetrlimit", __PNR_ugetrlimit },
+	{ "ulimit", __PNR_ulimit },
+	{ "umask", 166 },
+	{ "umount", __PNR_umount },
+	{ "umount2", 39 },
+	{ "uname", 160 },
+	{ "unlink", __PNR_unlink },
+	{ "unlinkat", 35 },
+	{ "unshare", 97 },
+	{ "uselib", __PNR_uselib },
+	{ "userfaultfd", 282 },
+	{ "usr26", __PNR_usr26 },
+	{ "usr32", __PNR_usr32 },
+	{ "ustat", __PNR_ustat },
+	{ "utime", __PNR_utime },
+	{ "utimensat", 88 },
+	{ "utimes", __PNR_utimes },
+	{ "vfork", __PNR_vfork },
+	{ "vhangup", 58 },
+	{ "vm86", __PNR_vm86 },
+	{ "vm86old", __PNR_vm86old },
+	{ "vmsplice", 75 },
+	{ "vserver", __PNR_vserver },
+	{ "wait4", 260 },
+	{ "waitid", 95 },
+	{ "waitpid", __PNR_waitpid },
+	{ "write", 64 },
+	{ "writev", 66 },
+	{ NULL, __NR_SCMP_ERROR },
+};
+
+/**
+ * Resolve a syscall name to a number
+ * @param name the syscall name
+ *
+ * Resolve the given syscall name to the syscall number using the syscall table.
+ * Returns the syscall number on success, including negative pseudo syscall
+ * numbers; returns __NR_SCMP_ERROR on failure.
+ *
+ */
+int csky_syscall_resolve_name(const char *name)
+{
+	unsigned int iter;
+	const struct arch_syscall_def *table = csky_syscall_table;
+
+	/* XXX - plenty of room for future improvement here */
+	for (iter = 0; table[iter].name != NULL; iter++) {
+		if (strcmp(name, table[iter].name) == 0)
+			return table[iter].num;
+	}
+
+	return __NR_SCMP_ERROR;
+}
+
+/**
+ * Resolve a syscall number to a name
+ * @param num the syscall number
+ *
+ * Resolve the given syscall number to the syscall name using the syscall table.
+ * Returns a pointer to the syscall name string on success, including pseudo
+ * syscall names; returns NULL on failure.
+ *
+ */
+const char *csky_syscall_resolve_num(int num)
+{
+	unsigned int iter;
+	const struct arch_syscall_def *table = csky_syscall_table;
+
+	/* XXX - plenty of room for future improvement here */
+	for (iter = 0; table[iter].num != __NR_SCMP_ERROR; iter++) {
+		if (num == table[iter].num)
+			return table[iter].name;
+	}
+
+	return NULL;
+}
+
+
+/**
+ * Iterate through the syscall table and return the syscall mapping
+ * @param spot the offset into the syscall table
+ *
+ * Return the syscall mapping at position @spot or NULL on failure.  This
+ * function should only ever be used internally by libseccomp.
+ *
+ */
+const struct arch_syscall_def *csky_syscall_iterate(unsigned int spot)
+{
+	/* XXX - no safety checks here */
+	return &csky_syscall_table[spot];
+}
diff --git a/src/arch-csky.c b/src/arch-csky.c
new file mode 100644
index 0000000..2aee234
--- /dev/null
+++ b/src/arch-csky.c
@@ -0,0 +1,38 @@
+/**
+ * Enhanced Seccomp ARM Specific Code
+ *
+ * Copyright (c) 2013 Red Hat <pmoore@redhat.com>
+ * Author: Paul Moore <paul@paul-moore.com>
+ */
+
+/*
+ * This library is free software; you can redistribute it and/or modify it
+ * under the terms of version 2.1 of the GNU Lesser General Public License as
+ * published by the Free Software Foundation.
+ *
+ * This library is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
+ * for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this library; if not, see <http://www.gnu.org/licenses>.
+ */
+
+#include <stdlib.h>
+#include <errno.h>
+#include <linux/audit.h>
+
+#include "arch.h"
+#include "arch-csky.h"
+
+const struct arch_def arch_def_csky = {
+	.token = SCMP_ARCH_CSKY,
+	.token_bpf = AUDIT_ARCH_CSKY,
+	.size = ARCH_SIZE_32,
+	.endian = ARCH_ENDIAN_LITTLE,
+	.syscall_resolve_name = csky_syscall_resolve_name,
+	.syscall_resolve_num = csky_syscall_resolve_num,
+	.syscall_rewrite = NULL,
+	.rule_add = NULL,
+};
diff --git a/src/arch-csky.h b/src/arch-csky.h
new file mode 100644
index 0000000..06b0151
--- /dev/null
+++ b/src/arch-csky.h
@@ -0,0 +1,37 @@
+/**
+ * Enhanced Seccomp ARM Specific Code
+ *
+ * Copyright (c) 2013 Red Hat <pmoore@redhat.com>
+ * Author: Paul Moore <paul@paul-moore.com>
+ */
+
+/*
+ * This library is free software; you can redistribute it and/or modify it
+ * under the terms of version 2.1 of the GNU Lesser General Public License as
+ * published by the Free Software Foundation.
+ *
+ * This library is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
+ * for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this library; if not, see <http://www.gnu.org/licenses>.
+ */
+
+#ifndef _ARCH_CSKY_H
+#define _ARCH_CSKY_H
+
+#include <inttypes.h>
+
+#include "arch.h"
+#include "system.h"
+
+extern const struct arch_def arch_def_csky;
+
+int csky_syscall_resolve_name(const char *name);
+const char *csky_syscall_resolve_num(int num);
+
+const struct arch_syscall_def *csky_syscall_iterate(unsigned int spot);
+
+#endif
diff --git a/src/arch-syscall-check.c b/src/arch-syscall-check.c
index 92b62c2..85772c1 100644
--- a/src/arch-syscall-check.c
+++ b/src/arch-syscall-check.c
@@ -70,6 +70,7 @@ int main(int argc, char *argv[])
 	int i_x32 = 0;
 	int i_arm = 0;
 	int i_aarch64 = 0;
+	int i_csky = 0;
 	int i_mips = 0;
 	int i_mips64 = 0;
 	int i_mips64n32 = 0;
@@ -101,6 +102,8 @@ int main(int argc, char *argv[])
 			      arm_syscall_iterate(i_arm));
 		syscall_check(str_miss, sys_name, "aarch64",
 			      aarch64_syscall_iterate(i_aarch64));
+		syscall_check(str_miss, sys_name, "csky",
+			      csky_syscall_iterate(i_csky));
 		syscall_check(str_miss, sys_name, "mips",
 			      mips_syscall_iterate(i_mips));
 		syscall_check(str_miss, sys_name, "mips64",
@@ -139,6 +142,8 @@ int main(int argc, char *argv[])
 			i_arm = -1;
 		if (!aarch64_syscall_iterate(++i_aarch64)->name)
 			i_aarch64 = -1;
+		if (!csky_syscall_iterate(++i_csky)->name)
+			i_csky = -1;
 		if (!mips_syscall_iterate(++i_mips)->name)
 			i_mips = -1;
 		if (!mips64_syscall_iterate(++i_mips64)->name)
@@ -159,6 +164,7 @@ int main(int argc, char *argv[])
 			i_s390x = -1;
 	} while (i_x86_64 >= 0 && i_x32 >= 0 &&
 		 i_arm >= 0 && i_aarch64 >= 0 &&
+		 i_csky >= 0 &&
 		 i_mips >= 0 && i_mips64 >= 0 && i_mips64n32 >= 0 &&
 		 i_parisc >= 0 &&
 		 i_ppc >= 0 && i_ppc64 >= 0 &&
@@ -187,6 +193,10 @@ int main(int argc, char *argv[])
 		printf("ERROR, aarch64 has additional syscalls\n");
 		return 1;
 	}
+	if (i_csky >= 0) {
+		printf("ERROR, csky has additional syscalls\n");
+		return 1;
+	}
 	if (i_mips >= 0) {
 		printf("ERROR, mips has additional syscalls\n");
 		return 1;
diff --git a/src/arch-syscall-validate b/src/arch-syscall-validate
index c714616..3480850 100755
--- a/src/arch-syscall-validate
+++ b/src/arch-syscall-validate
@@ -227,6 +227,50 @@ function dump_lib_aarch64() {
 	dump_lib_arch aarch64
 }
 
+
+#
+# Dump the csky system syscall table
+#
+# Arguments:
+#     1    path to the kernel source
+#
+#  Dump the architecture's syscall table to stdout.
+#
+function dump_sys_csky() {
+	gcc -E -dM -I$1/include/uapi \
+		-D__BITS_PER_LONG=64 -D__ARCH_WANT_RENAMEAT \
+		$1/include/uapi/asm-generic/unistd.h | \
+		grep "^#define __NR_" | \
+		sed -e '/__NR_syscalls/d' | \
+		sed -e '/__NR_arch_specific_syscall/d' | \
+		sed -e 's/#define[ \t]\+__NR_\([^ \t]\+\)[ \t]\+\(.*\)/\1\t\2/' | \
+		sed -e 's/__NR3264_fcntl/25/' | \
+		sed -e 's/__NR3264_statfs/43/' | \
+		sed -e 's/__NR3264_fstatfs/44/' | \
+		sed -e 's/__NR3264_truncate/45/' | \
+		sed -e 's/__NR3264_ftruncate/46/' | \
+		sed -e 's/__NR3264_lseek/62/' | \
+		sed -e 's/__NR3264_sendfile/71/' | \
+		sed -e 's/__NR3264_fstatat/79/' | \
+		sed -e 's/__NR3264_fstat/80/' | \
+		sed -e 's/__NR3264_mmap/222/' | \
+		sed -e 's/__NR3264_fadvise64/223/' | \
+		sed -e 's/__NR3264_lstat/1039/' | \
+		sed -e 's/__NR3264_stat/1038/' | \
+		sort
+}
+
+#
+# Dump the csky  library syscall table
+#
+#  Dump the library's syscall table to stdout.
+#
+function dump_lib_csky() {
+	dump_lib_arch csky
+}
+
+
+
 #
 # Dump the mips system syscall table
 #
diff --git a/src/arch.c b/src/arch.c
index 634f933..0d7f8c8 100644
--- a/src/arch.c
+++ b/src/arch.c
@@ -44,6 +44,7 @@
 #include "arch-riscv64.h"
 #include "arch-s390.h"
 #include "arch-s390x.h"
+#include "arch-csky.h"
 #include "db.h"
 #include "system.h"
 
@@ -97,6 +98,8 @@ const struct arch_def *arch_def_native = &arch_def_s390x;
 const struct arch_def *arch_def_native = &arch_def_s390;
 #elif __riscv && __riscv_xlen == 64
 const struct arch_def *arch_def_native = &arch_def_riscv64;
+#elif __csky__
+const struct arch_def *arch_def_native = &arch_def_csky;
 #else
 #error the arch code needs to know about your machine type
 #endif /* machine type guess */
@@ -161,6 +164,8 @@ const struct arch_def *arch_def_lookup(uint32_t token)
 		return &arch_def_s390;
 	case SCMP_ARCH_S390X:
 		return &arch_def_s390x;
+	case SCMP_ARCH_CSKY:
+		return &arch_def_csky;
 	}
 
 	return NULL;
@@ -213,6 +218,8 @@ const struct arch_def *arch_def_lookup_name(const char *arch_name)
 		return &arch_def_s390;
 	else if (strcmp(arch_name, "s390x") == 0)
 		return &arch_def_s390x;
+	else if (strcmp(arch_name, "csky") == 0)
+		return &arch_def_csky;
 
 	return NULL;
 }
diff --git a/src/gen_pfc.c b/src/gen_pfc.c
index 9d552fe..adb175f 100644
--- a/src/gen_pfc.c
+++ b/src/gen_pfc.c
@@ -89,6 +89,8 @@ static const char *_pfc_arch(const struct arch_def *arch)
 		return "s390x";
 	case SCMP_ARCH_S390:
 		return "s390";
+	case SCMP_ARCH_CSKY:
+		return "csky";
 	default:
 		return "UNKNOWN";
 	}
diff --git a/src/python/seccomp.pyx b/src/python/seccomp.pyx
index f144c5c..9f39ce1 100644
--- a/src/python/seccomp.pyx
+++ b/src/python/seccomp.pyx
@@ -204,6 +204,7 @@ cdef class Arch:
     PPC64 - 64-bit PowerPC
     PPC - 32-bit PowerPC
     RISCV64 - 64-bit RISC-V
+    CSKY - 32-bit csky
     """
 
     cdef int _token
@@ -228,6 +229,7 @@ cdef class Arch:
     RISCV64 = libseccomp.SCMP_ARCH_RISCV64
     S390 = libseccomp.SCMP_ARCH_S390
     S390X = libseccomp.SCMP_ARCH_S390X
+    CSKY = libseccomp.SCMP_ARCH_CSKY
 
     def __cinit__(self, arch=libseccomp.SCMP_ARCH_NATIVE):
         """ Initialize the architecture object.
diff --git a/src/system.c b/src/system.c
index fa2c90c..088c5a4 100644
--- a/src/system.c
+++ b/src/system.c
@@ -72,6 +72,7 @@ int sys_chk_seccomp_syscall(void)
 	case SCMP_ARCH_ARM:
 	case SCMP_ARCH_AARCH64:
 	case SCMP_ARCH_PPC64:
+	case SCMP_ARCH_CSKY:
 	case SCMP_ARCH_PPC64LE:
 	case SCMP_ARCH_RISCV64:
 	case SCMP_ARCH_S390:
diff --git a/tests/16-sim-arch_basic.c b/tests/16-sim-arch_basic.c
index c58dab1..2647a6f 100644
--- a/tests/16-sim-arch_basic.c
+++ b/tests/16-sim-arch_basic.c
@@ -68,6 +68,9 @@ int main(int argc, char *argv[])
 	rc = seccomp_arch_add(ctx, SCMP_ARCH_X32);
 	if (rc != 0)
 		goto out;
+	rc = seccomp_arch_add(ctx, SCMP_ARCH_CSKY);
+	if (rc != 0)
+		goto out;
 	rc = seccomp_arch_add(ctx, SCMP_ARCH_ARM);
 	if (rc != 0)
 		goto out;
diff --git a/tests/16-sim-arch_basic.py b/tests/16-sim-arch_basic.py
index 846553f..863b076 100755
--- a/tests/16-sim-arch_basic.py
+++ b/tests/16-sim-arch_basic.py
@@ -38,6 +38,7 @@ def test(args):
     f.add_arch(Arch("x86"))
     f.add_arch(Arch("x86_64"))
     f.add_arch(Arch("x32"))
+    f.add_arch(Arch("csky"))
     f.add_arch(Arch("arm"))
     f.add_arch(Arch("aarch64"))
     f.add_arch(Arch("mipsel"))
diff --git a/tests/23-sim-arch_all_le_basic.c b/tests/23-sim-arch_all_le_basic.c
index 32739e5..8f292a3 100644
--- a/tests/23-sim-arch_all_le_basic.c
+++ b/tests/23-sim-arch_all_le_basic.c
@@ -74,6 +74,10 @@ int main(int argc, char *argv[])
 	rc = seccomp_arch_add(ctx, seccomp_arch_resolve_name("riscv64"));
 	if (rc != 0)
 		goto out;
+	
+	rc = seccomp_arch_add(ctx, seccomp_arch_resolve_name("csky"));
+	if (rc != 0)
+		goto out;
 
 	rc = seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(read), 1,
 			      SCMP_A0(SCMP_CMP_EQ, STDIN_FILENO));
diff --git a/tests/23-sim-arch_all_le_basic.py b/tests/23-sim-arch_all_le_basic.py
index 33eedb1..8c055f2 100755
--- a/tests/23-sim-arch_all_le_basic.py
+++ b/tests/23-sim-arch_all_le_basic.py
@@ -41,6 +41,7 @@ def test(args):
     f.add_arch(Arch("mipsel64n32"))
     f.add_arch(Arch("ppc64le"))
     f.add_arch(Arch("riscv64"))
+    f.add_arch(Arch("csky"))
     f.add_rule(ALLOW, "read", Arg(0, EQ, sys.stdin.fileno()))
     f.add_rule(ALLOW, "write", Arg(0, EQ, sys.stdout.fileno()))
     f.add_rule(ALLOW, "write", Arg(0, EQ, sys.stderr.fileno()))
diff --git a/tests/regression b/tests/regression
index 28fe3b2..b1c4627 100755
--- a/tests/regression
+++ b/tests/regression
@@ -24,6 +24,7 @@
 GLBL_ARCH_LE_SUPPORT=" \
 	x86 x86_64 x32 \
 	arm aarch64 \
+	csky \
 	mipsel mipsel64 mipsel64n32 \
 	ppc64le \
 	riscv64"
@@ -777,7 +778,7 @@ function run_test_live() {
 
 	# setup the arch specific return values
 	case "$arch" in
-	x86|x86_64|x32|arm|aarch64|parisc|parisc64|ppc|ppc64|ppc64le|ppc|riscv64|s390|s390x)
+	x86|x86_64|x32|arm|aarch64|parisc|parisc64|ppc|ppc64|ppc64le|ppc|csky|riscv64|s390|s390x)
 		rc_kill_process=159
 		rc_kill=159
 		rc_allow=160
diff --git a/tools/scmp_arch_detect.c b/tools/scmp_arch_detect.c
index c9f42d7..aeddbf8 100644
--- a/tools/scmp_arch_detect.c
+++ b/tools/scmp_arch_detect.c
@@ -123,6 +123,8 @@ int main(int argc, char *argv[])
 		case SCMP_ARCH_S390X:
 			printf("s390x\n");
 			break;
+		case SCMP_ARCH_CSKY:
+			printf("csky\n");
 		default:
 			printf("unknown\n");
 		}
diff --git a/tools/scmp_bpf_disasm.c b/tools/scmp_bpf_disasm.c
index bac2524..5df4915 100644
--- a/tools/scmp_bpf_disasm.c
+++ b/tools/scmp_bpf_disasm.c
@@ -510,6 +510,8 @@ int main(int argc, char *argv[])
 				arch = AUDIT_ARCH_S390;
 			else if (strcmp(optarg, "s390x") == 0)
 				arch = AUDIT_ARCH_S390X;
+			else if (strcmp(optarg, "csky") == 0)
+				arch = AUDIT_ARCH_CSKY;
 			else
 				exit_usage(argv[0]);
 			break;
diff --git a/tools/scmp_bpf_sim.c b/tools/scmp_bpf_sim.c
index 7c8501b..cad1490 100644
--- a/tools/scmp_bpf_sim.c
+++ b/tools/scmp_bpf_sim.c
@@ -287,6 +287,8 @@ int main(int argc, char *argv[])
 				arch = AUDIT_ARCH_S390;
 			else if (strcmp(optarg, "s390x") == 0)
 				arch = AUDIT_ARCH_S390X;
+			else if (strcmp(optarg, "csky") == 0)
+				arch = AUDIT_ARCH_CSKY;
 			else
 				exit_fault(EINVAL);
 			break;
diff --git a/tools/util.c b/tools/util.c
index b608316..02b7947 100644
--- a/tools/util.c
+++ b/tools/util.c
@@ -80,6 +80,8 @@
 #define ARCH_NATIVE		AUDIT_ARCH_S390X
 #elif __s390__
 #define ARCH_NATIVE		AUDIT_ARCH_S390
+#elif __csky__
+#define ARCH_NATIVE		AUDIT_ARCH_CSKY
 #else
 #error the simulator code needs to know about your machine type
 #endif
diff --git a/tools/util.h b/tools/util.h
index 5d6d3e4..556c4b0 100644
--- a/tools/util.h
+++ b/tools/util.h
@@ -80,6 +80,14 @@
 #define AUDIT_ARCH_RISCV64	(EM_RISCV|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)
 #endif /* AUDIT_ARCH_RISCV64 */
 
+#ifndef EM_CSKY
+#define EM_CSKY		244
+#endif /* EM_CSKY */
+
+#ifndef AUDIT_ARCH_CSKY
+#define AUDIT_ARCH_CSKY	(EM_CSKY|__AUDIT_ARCH_32BIT|__AUDIT_ARCH_LE)
+#endif /* AUDIT_ARCH_RISCV64 */
+
 extern uint32_t arch;
 
 uint16_t ttoh16(uint32_t arch, uint16_t val);
-- 
1.8.3.1

